-- visitors 테이블 생성
CREATE TABLE visitors (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  visit_date DATE NOT NULL DEFAULT CURRENT_DATE,   -- 서버 날짜 자동 기록
  visitor_id TEXT NOT NULL,                        -- 쿠키 방문자 식별자
  ip_address TEXT,                                 -- IP 주소
  device_type TEXT,                                -- 기기 타입 (PC, 모바일, 태블릿)
  browser TEXT,                                    -- 브라우저 정보
  os TEXT,                                         -- 운영체제
  language TEXT,                                   -- 언어 설정
  referrer TEXT,                                   -- 참조 URL
  page_url TEXT NOT NULL,                          -- 방문한 페이지 URL
  visit_timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- daily_stats 테이블 생성
CREATE TABLE daily_stats (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  date DATE NOT NULL UNIQUE,
  post_count INTEGER NOT NULL DEFAULT 0,     -- posts 테이블의 게시글 수
  user_count INTEGER NOT NULL DEFAULT 0,     -- user 테이블의 사용자 수
  visitor_count INTEGER NOT NULL DEFAULT 0,  -- 방문자 테이블의 방문자 수
  unique_visitor_count INTEGER NOT NULL DEFAULT 0,  -- 고유 방문자 수
  
  -- 메타데이터
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- 인덱스 생성
CREATE INDEX idx_visitors_visit_date ON visitors(visit_date);
CREATE INDEX idx_visitors_id_date ON visitors(visitor_id, visit_date);
CREATE INDEX idx_visitors_page_url ON visitors(page_url);
CREATE INDEX idx_visitors_device_type ON visitors(device_type);

-- 방문자 수 증가 프로시저
CREATE OR REPLACE PROCEDURE public.increment_visitor_count()
LANGUAGE plpgsql
AS $$
DECLARE
    v_count INTEGER;
BEGIN
    -- 트랜잭션 시작
    BEGIN
        -- 오늘 날짜의 통계가 없으면 생성
        IF NOT EXISTS (SELECT 1 FROM daily_stats WHERE date = CURRENT_DATE) THEN
            INSERT INTO daily_stats (date, visitor_count, unique_visitor_count)
            VALUES (CURRENT_DATE, 1, 1);
        ELSE
            -- 고유 방문자인지 확인
            SELECT COUNT(*) INTO v_count
            FROM visitors
            WHERE visitor_id = NEW.visitor_id
            AND visit_date = CURRENT_DATE;

            -- 오늘 날짜의 방문자 수 증가
            UPDATE daily_stats
            SET 
                visitor_count = visitor_count + 1,
                unique_visitor_count = CASE 
                    WHEN v_count = 0 THEN unique_visitor_count + 1
                    ELSE unique_visitor_count
                END,
                updated_at = NOW()
            WHERE date = CURRENT_DATE;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            -- 에러 로깅
            RAISE NOTICE 'Error in increment_visitor_count: %', SQLERRM;
            -- 트랜잭션 롤백
            RAISE;
    END;
END;
$$;

-- 방문자 추가 시 방문자 수 증가 트리거
CREATE OR REPLACE FUNCTION public.increment_visitor_count_trigger()
RETURNS TRIGGER AS $$
BEGIN
    CALL public.increment_visitor_count();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- visitors 테이블에 트리거 설정
DROP TRIGGER IF EXISTS trigger_increment_visitor_count ON visitors;
CREATE TRIGGER trigger_increment_visitor_count
AFTER INSERT ON visitors
FOR EACH ROW
EXECUTE FUNCTION public.increment_visitor_count_trigger();

-- 통계 업데이트 함수
CREATE OR REPLACE FUNCTION public.update_stats()
RETURNS void AS $$
BEGIN
    -- 트랜잭션 시작
    BEGIN
        -- 오늘 날짜 데이터 존재 여부 확인
        IF EXISTS (SELECT 1 FROM daily_stats WHERE date = CURRENT_DATE) THEN
            -- 존재하면 업데이트
            UPDATE daily_stats
            SET 
                post_count = (SELECT COUNT(*) FROM posts),
                user_count = (SELECT COUNT(*) FROM users),
                visitor_count = (SELECT COUNT(*) FROM visitors WHERE visit_date = CURRENT_DATE),
                unique_visitor_count = (SELECT COUNT(DISTINCT visitor_id) FROM visitors WHERE visit_date = CURRENT_DATE),
                updated_at = NOW()
            WHERE date = CURRENT_DATE;
        ELSE
            -- 존재하지 않으면 새로 삽입
            INSERT INTO daily_stats (date, post_count, user_count, visitor_count, unique_visitor_count)
            VALUES (
                CURRENT_DATE,
                (SELECT COUNT(*) FROM posts),
                (SELECT COUNT(*) FROM users),
                (SELECT COUNT(*) FROM visitors WHERE visit_date = CURRENT_DATE),
                (SELECT COUNT(DISTINCT visitor_id) FROM visitors WHERE visit_date = CURRENT_DATE)
            );
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            -- 에러 로깅
            RAISE NOTICE 'Error in update_stats: %', SQLERRM;
            -- 트랜잭션 롤백
            RAISE;
    END;
END;
$$ LANGUAGE plpgsql;

-- pg_cron 확장 설치 (관리자 권한 필요)
CREATE EXTENSION IF NOT EXISTS pg_cron;

-- 매 시간마다 통계 업데이트 실행 (0분 기준)
SELECT cron.schedule('0 * * * *', 'SELECT public.update_stats()');

-- 초기 데이터 생성
INSERT INTO daily_stats (date, post_count, user_count, visitor_count, unique_visitor_count)
SELECT 
    CURRENT_DATE,
    (SELECT COUNT(*) FROM posts),
    (SELECT COUNT(*) FROM users),
    (SELECT COUNT(*) FROM visitors WHERE visit_date = CURRENT_DATE),
    (SELECT COUNT(DISTINCT visitor_id) FROM visitors WHERE visit_date = CURRENT_DATE)
WHERE NOT EXISTS (SELECT 1 FROM daily_stats WHERE date = CURRENT_DATE);

-- 포스트 수 증가 프로시저
CREATE OR REPLACE PROCEDURE public.increment_post_count()
LANGUAGE plpgsql
AS $$
BEGIN
    -- 트랜잭션 시작
    BEGIN
        -- 오늘 날짜의 통계가 없으면 생성
        IF NOT EXISTS (SELECT 1 FROM daily_stats WHERE date = CURRENT_DATE) THEN
            INSERT INTO daily_stats (date, post_count)
            VALUES (CURRENT_DATE, 1);
        ELSE
            -- 오늘 날짜의 포스트 수 증가
            UPDATE daily_stats
            SET 
                post_count = post_count + 1,
                updated_at = NOW()
            WHERE date = CURRENT_DATE;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE 'Error in increment_post_count: %', SQLERRM;
            RAISE;
    END;
END;
$$;

-- 포스트 수 감소 프로시저
CREATE OR REPLACE PROCEDURE public.decrement_post_count()
LANGUAGE plpgsql
AS $$
BEGIN
    -- 트랜잭션 시작
    BEGIN
        -- 오늘 날짜의 포스트 수 감소
        UPDATE daily_stats
        SET 
            post_count = post_count - 1,
            updated_at = NOW()
        WHERE date = CURRENT_DATE;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE 'Error in decrement_post_count: %', SQLERRM;
            RAISE;
    END;
END;
$$;

-- 유저 수 증가 프로시저
CREATE OR REPLACE PROCEDURE public.increment_user_count()
LANGUAGE plpgsql
AS $$
BEGIN
    -- 트랜잭션 시작
    BEGIN
        -- 오늘 날짜의 통계가 없으면 생성
        IF NOT EXISTS (SELECT 1 FROM daily_stats WHERE date = CURRENT_DATE) THEN
            INSERT INTO daily_stats (date, user_count)
            VALUES (CURRENT_DATE, 1);
        ELSE
            -- 오늘 날짜의 유저 수 증가
            UPDATE daily_stats
            SET 
                user_count = user_count + 1,
                updated_at = NOW()
            WHERE date = CURRENT_DATE;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE 'Error in increment_user_count: %', SQLERRM;
            RAISE;
    END;
END;
$$;

-- 유저 수 감소 프로시저
CREATE OR REPLACE PROCEDURE public.decrement_user_count()
LANGUAGE plpgsql
AS $$
BEGIN
    -- 트랜잭션 시작
    BEGIN
        -- 오늘 날짜의 유저 수 감소
        UPDATE daily_stats
        SET 
            user_count = user_count - 1,
            updated_at = NOW()
        WHERE date = CURRENT_DATE;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE 'Error in decrement_user_count: %', SQLERRM;
            RAISE;
    END;
END;
$$;

-- 포스트 트리거 함수
CREATE OR REPLACE FUNCTION public.post_count_trigger()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        CALL public.increment_post_count();
    ELSIF TG_OP = 'DELETE' THEN
        CALL public.decrement_post_count();
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 유저 트리거 함수
CREATE OR REPLACE FUNCTION public.user_count_trigger()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        CALL public.increment_user_count();
    ELSIF TG_OP = 'DELETE' THEN
        CALL public.decrement_user_count();
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 포스트 테이블에 트리거 설정
DROP TRIGGER IF EXISTS trigger_post_count ON posts;
CREATE TRIGGER trigger_post_count
AFTER INSERT OR DELETE ON posts
FOR EACH ROW
EXECUTE FUNCTION public.post_count_trigger();

-- 유저 테이블에 트리거 설정
DROP TRIGGER IF EXISTS trigger_user_count ON users;
CREATE TRIGGER trigger_user_count
AFTER INSERT OR DELETE ON users
FOR EACH ROW
EXECUTE FUNCTION public.user_count_trigger(); 