-- 현재 운용중인 스키마와 일치하도록 수정
-- 생성일: 2025-07-05

-- =============================================
-- 1. points 테이블 수정 (id를 IDENTITY로 변경)
-- =============================================
ALTER TABLE IF EXISTS points 
ALTER COLUMN id SET GENERATED BY DEFAULT AS IDENTITY;

-- =============================================
-- 2. 누락된 외래키 제약조건 추가
-- =============================================

-- comments 테이블의 post_id 외래키 제약조건 추가 (이미 있을 수 있음)
DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name = 'comments_post_id_fkey' 
        AND table_name = 'comments'
    ) THEN
        ALTER TABLE comments 
        ADD CONSTRAINT comments_post_id_fkey 
        FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE;
    END IF;
END $$;

-- =============================================
-- 3. 기존 마이그레이션과 충돌 방지를 위한 테이블 존재 확인
-- =============================================

-- 테이블들이 이미 존재하는지 확인하고 필요시 스키마 조정
DO $$ 
BEGIN
    -- categories 테이블 체크
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'categories') THEN
        RAISE NOTICE 'categories 테이블이 존재하지 않습니다. 초기 마이그레이션을 먼저 실행하세요.';
    END IF;

    -- posts 테이블 체크
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'posts') THEN
        RAISE NOTICE 'posts 테이블이 존재하지 않습니다. 초기 마이그레이션을 먼저 실행하세요.';
    END IF;

    -- comments 테이블 체크
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'comments') THEN
        RAISE NOTICE 'comments 테이블이 존재하지 않습니다. 초기 마이그레이션을 먼저 실행하세요.';
    END IF;

    -- quiz_questions 테이블 체크
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'quiz_questions') THEN
        RAISE NOTICE 'quiz_questions 테이블이 존재하지 않습니다. 초기 마이그레이션을 먼저 실행하세요.';
    END IF;

    -- quiz_attempts 테이블 체크
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'quiz_attempts') THEN
        RAISE NOTICE 'quiz_attempts 테이블이 존재하지 않습니다. 초기 마이그레이션을 먼저 실행하세요.';
    END IF;

    -- quiz_answers 테이블 체크
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'quiz_answers') THEN
        RAISE NOTICE 'quiz_answers 테이블이 존재하지 않습니다. 초기 마이그레이션을 먼저 실행하세요.';
    END IF;

    RAISE NOTICE '프로덕션 스키마 수정 마이그레이션이 완료되었습니다.';
END $$;

-- =============================================
-- 4. 인덱스 추가 확인 (중복 방지)
-- =============================================

-- 인덱스가 이미 존재하는지 확인 후 생성
DO $$ 
BEGIN
    -- post_likes 테이블 인덱스 확인
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_post_likes_post_id') THEN
        CREATE INDEX idx_post_likes_post_id ON post_likes(post_id);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_post_likes_user_id') THEN
        CREATE INDEX idx_post_likes_user_id ON post_likes(user_id);
    END IF;

    -- comments 테이블 인덱스 확인
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_comments_post_id') THEN
        CREATE INDEX idx_comments_post_id ON comments(post_id);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_comments_parent_id') THEN
        CREATE INDEX idx_comments_parent_id ON comments(parent_id);
    END IF;

    -- posts 테이블 인덱스 확인
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_posts_category_id') THEN
        CREATE INDEX idx_posts_category_id ON posts(category_id);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_posts_author_id') THEN
        CREATE INDEX idx_posts_author_id ON posts(author_id);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_posts_created_at') THEN
        CREATE INDEX idx_posts_created_at ON posts(created_at);
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_posts_status') THEN
        CREATE INDEX idx_posts_status ON posts(status);
    END IF;

    RAISE NOTICE '인덱스 생성이 완료되었습니다.';
END $$;

-- =============================================
-- 5. 함수 존재 확인 (중복 방지)
-- =============================================

-- 함수들이 이미 존재하는지 확인
DO $$ 
BEGIN
    -- increment_view_count 함수 확인
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.routines 
        WHERE routine_name = 'increment_view_count'
    ) THEN
        RAISE NOTICE 'increment_view_count 함수가 존재하지 않습니다. 초기 마이그레이션을 먼저 실행하세요.';
    END IF;

    -- increment_visitor_count 함수 확인
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.routines 
        WHERE routine_name = 'increment_visitor_count'
    ) THEN
        RAISE NOTICE 'increment_visitor_count 함수가 존재하지 않습니다. 초기 마이그레이션을 먼저 실행하세요.';
    END IF;

    -- update_stats 함수 확인
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.routines 
        WHERE routine_name = 'update_stats'
    ) THEN
        RAISE NOTICE 'update_stats 함수가 존재하지 않습니다. 초기 마이그레이션을 먼저 실행하세요.';
    END IF;

    RAISE NOTICE '함수 확인이 완료되었습니다.';
END $$;

-- =============================================
-- 6. 현재 스키마 상태 요약 출력
-- =============================================
DO $$ 
DECLARE
    table_count INTEGER;
    index_count INTEGER;
    function_count INTEGER;
BEGIN
    -- 테이블 개수 확인
    SELECT COUNT(*) INTO table_count 
    FROM information_schema.tables 
    WHERE table_schema = 'public' AND table_type = 'BASE TABLE';

    -- 인덱스 개수 확인
    SELECT COUNT(*) INTO index_count 
    FROM pg_indexes 
    WHERE schemaname = 'public';

    -- 함수 개수 확인
    SELECT COUNT(*) INTO function_count 
    FROM information_schema.routines 
    WHERE routine_schema = 'public' AND routine_type = 'FUNCTION';

    RAISE NOTICE '===========================================';
    RAISE NOTICE '현재 스키마 상태:';
    RAISE NOTICE '- 테이블 개수: %', table_count;
    RAISE NOTICE '- 인덱스 개수: %', index_count;
    RAISE NOTICE '- 함수 개수: %', function_count;
    RAISE NOTICE '===========================================';
END $$; 